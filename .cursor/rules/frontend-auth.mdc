---
description: frontend authentication
globs: 
alwaysApply: false
---
## Overview of Our Authentication Strategy

We've implemented a secure authentication system in our NestJS backend using Passport.js with JWT (JSON Web Tokens). This guide will help you integrate with our backend using Next.js for the frontend.

### Key Components

1. **Authentication Flow**:
   - Register → Create new player account
   - Login → Authenticate credentials, receive JWT
   - Protected routes → Use JWT in Authorization header

2. **Token Strategy**:
   - JWT tokens issued on successful login
   - Tokens expire after 1 hour
   - Tokens must be included in HTTP requests and WebSocket connections

## API Endpoints

### 1. Registration

**Endpoint**: `POST /auth/register`

**Request Body**:
```json
{
  "username": "player123",
  "email": "player@example.com",
  "password": "securepassword"
}
```

**Response (200 OK)**:
```json
{
  "_id": "507f1f77bcf86cd799439011",
  "username": "player123",
  "email": "player@example.com",
  "accountStatus": "active",
  "lastLogin": "2023-03-01T12:00:00.000Z",
  "settings": {
    "notifications": true,
    "theme": "dark",
    "keybinds": {}
  }
}
```

### 2. Login

**Endpoint**: `POST /auth/login`

**Request Body**:
```json
{
  "username": "player123",
  "password": "securepassword"
}
```

**Response (200 OK)**:
```json
{
  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "player": {
    "id": "507f1f77bcf86cd799439011",
    "username": "player123",
    "email": "player@example.com"
  }
}
```

### 3. Get User Profile

**Endpoint**: `GET /auth/profile`

**Headers**:
```
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

**Response (200 OK)**:
```json
{
  "userId": "507f1f77bcf86cd799439011",
  "username": "player123",
  "email": "player@example.com"
}
```

## Next.js Frontend Implementation

### 1. Authentication Context

Create an auth context to manage authentication state:

```typescript
// lib/contexts/AuthContext.tsx
'use client';

import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useRouter } from 'next/navigation';

type User = {
  id: string;
  username: string;
  email: string;
};

type AuthContextType = {
  user: User | null;
  token: string | null;
  login: (username: string, password: string) => Promise<void>;
  register: (username: string, email: string, password: string) => Promise<void>;
  logout: () => void;
  isLoading: boolean;
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();

  // Initialize auth state from storage on component mount
  useEffect(() => {
    const storedToken = localStorage.getItem('auth_token');
    const storedUser = localStorage.getItem('user');
    
    if (storedToken && storedUser) {
      setToken(storedToken);
      setUser(JSON.parse(storedUser));
    }
    
    setIsLoading(false);
  }, []);

  // Login function
  const login = async (username: string, password: string) => {
    setIsLoading(true);
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Login failed');
      }

      const data = await response.json();
      setToken(data.access_token);
      setUser(data.player);
      
      localStorage.setItem('auth_token', data.access_token);
      localStorage.setItem('user', JSON.stringify(data.player));
      
      router.push('/dashboard');
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  // Register function
  const register = async (username: string, email: string, password: string) => {
    setIsLoading(true);
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, email, password }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Registration failed');
      }

      // Usually we'd redirect to login after registration
      router.push('/login');
    } catch (error) {
      console.error('Registration error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  // Logout function
  const logout = () => {
    localStorage.removeItem('auth_token');
    localStorage.removeItem('user');
    setToken(null);
    setUser(null);
    router.push('/login');
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        token,
        login,
        register,
        logout,
        isLoading,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

// Custom hook to use the auth context
export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
```

### 2. API Service with Authentication

Create a service to make authenticated API calls:

```typescript
// lib/services/api.ts
'use client';

// Base fetch function with authentication
export async function fetchWithAuth(
  url: string,
  options: RequestInit = {}
) {
  // Get token from localStorage
  const token = localStorage.getItem('auth_token');
  
  // Set up headers with authentication
  const headers = {
    'Content-Type': 'application/json',
    ...(token ? { Authorization: `Bearer ${token}` } : {}),
    ...options.headers,
  };

  // Make the request
  const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}${url}`, {
    ...options,
    headers,
  });

  // Handle unauthorized responses
  if (response.status === 401) {
    localStorage.removeItem('auth_token');
    localStorage.removeItem('user');
    window.location.href = '/login';
    throw new Error('Session expired. Please login again.');
  }

  return response;
}

// Example API methods
export const api = {
  // Get user profile
  getUserProfile: async () => {
    const response = await fetchWithAuth('/auth/profile');
    if (!response.ok) {
      throw new Error('Failed to fetch profile');
    }
    return response.json();
  },
  
  // More API methods can be added here
};
```

### 3. Route Protection in Next.js

Create a middleware to protect routes:

```typescript
// middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  // Get the pathname of the request (e.g. /, /game, /dashboard)
  const path = request.nextUrl.pathname;
  
  // Define public paths that don't require authentication
  const isPublicPath = ['/login', '/register', '/'].includes(path);
  
  // Get the token from cookies
  const token = request.cookies.get('auth_token')?.value;
  
  // If the path requires authentication and there's no token, redirect to login
  if (!isPublicPath && !token) {
    return NextResponse.redirect(new URL('/login', request.url));
  }
  
  // If the user is logged in and tries to access login/register pages, redirect to dashboard
  if (isPublicPath && path !== '/' && token) {
    return NextResponse.redirect(new URL('/dashboard', request.url));
  }
  
  return NextResponse.next();
}

// Configure which paths should be checked by this middleware
export const config = {
  matcher: [
    '/',
    '/login',
    '/register',
    '/dashboard/:path*',
    '/game/:path*',
    '/profile/:path*',
  ],
};
```

### 4. WebSocket Connection with Authentication

Create a WebSocket service:

```typescript
// lib/services/websocket.ts
'use client';

import { io, Socket } from 'socket.io-client';

export class GameSocketService {
  private socket: Socket | null = null;
  private listeners: Record<string, Function[]> = {};

  // Connect to the game server with authentication
  connect() {
    // Get the token from storage
    const token = localStorage.getItem('auth_token');
    
    if (!token) {
      throw new Error('Authentication token required');
    }
    
    // Initialize socket connection with auth token
    this.socket = io(`${process.env.NEXT_PUBLIC_SOCKET_URL}/game`, {
      auth: {
        token,
      },
    });
    
    // Set up authentication event handlers
    this.socket.on('connect', () => {
      console.log('Socket connected');
    });
    
    this.socket.on('disconnect', () => {
      console.log('Socket disconnected');
    });
    
    this.socket.on('authentication:success', (data) => {
      console.log('Authentication successful', data);
      // Trigger any registered success listeners
      this.triggerListeners('authSuccess', data);
    });
    
    this.socket.on('authentication:failure', (error) => {
      console.error('Authentication failed', error);
      // Trigger any registered failure listeners
      this.triggerListeners('authFailure', error);
      // Close the connection
      this.disconnect();
    });
    
    return this;
  }
  
  // Disconnect from server
  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
    }
  }
  
  // Send events to the server
  emit(event: string, data?: any) {
    if (!this.socket) {
      throw new Error('Socket not connected');
    }
    this.socket.emit(event, data);
  }
  
  // Listen for events from the server
  on(event: string, callback: Function) {
    if (!this.listeners[event]) {
      this.listeners[event] = [];
    }
    this.listeners[event].push(callback);
    
    if (this.socket) {
      this.socket.on(event, (data) => {
        callback(data);
      });
    }
  }
  
  // Trigger registered listeners for an event
  private triggerListeners(event: string, data: any) {
    if (this.listeners[event]) {
      this.listeners[event].forEach(callback => callback(data));
    }
  }
}

// Create singleton instance
export const gameSocket = new GameSocketService();
```

### 5. Example Login Page

```typescript
// app/login/page.tsx
'use client';

import { useState } from 'react';
import { useAuth } from '@/lib/contexts/AuthContext';
import { useRouter } from 'next/navigation';

export default function LoginPage() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const { login, isLoading } = useAuth();
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    try {
      await login(username, password);
      // Navigation is handled in the login function
    } catch (err: any) {
      setError(err.message || 'Login failed');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-8 p-10 bg-white rounded-xl shadow-lg">
        <div className="text-center">
          <h2 className="text-3xl font-extrabold text-gray-900">Sign in to your account</h2>
        </div>
        
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            {error}
          </div>
        )}
        
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div>
            <label htmlFor="username" className="block text-sm font-medium text-gray-700">
              Username
            </label>
            <input
              id="username"
              name="username"
              type="text"
              required
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
            />
          </div>
          
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              required
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
          
          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              {isLoading ? 'Signing in...' : 'Sign in'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
```

### 6. Example Game Page with WebSocket

```typescript
// app/game/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useAuth } from '@/lib/contexts/AuthContext';
import { gameSocket } from '@/lib/services/websocket';

export default function GamePage() {
  const { user } = useAuth();
  const [isConnected, setIsConnected] = useState(false);
  const [gameMessage, setGameMessage] = useState('Connecting to game server...');

  useEffect(() => {
    // Connect to WebSocket
    try {
      gameSocket.connect();
      
      // Listen for connection events
      gameSocket.on('connect', () => {
        setIsConnected(true);
        setGameMessage('Connected to game server');
      });
      
      gameSocket.on('disconnect', () => {
        setIsConnected(false);
        setGameMessage('Disconnected from game server');
      });
      
      gameSocket.on('authSuccess', (data) => {
        setGameMessage(`Authenticated as ${data.playerId}`);
      });
      
      gameSocket.on('authFailure', (error) => {
        setGameMessage(`Authentication failed: ${error.message}`);
      });
      
      // Example game event
      gameSocket.on('gameUpdate', (data) => {
        console.log('Game update:', data);
        // Handle game update logic
      });
    } catch (error: any) {
      setGameMessage(`Connection error: ${error.message}`);
    }
    
    // Cleanup on unmount
    return () => {
      gameSocket.disconnect();
    };
  }, []);
  
  // Example function to send a command to the game server
  const sendPing = () => {
    if (isConnected) {
      gameSocket.emit('ping');
      setGameMessage('Sent ping to server...');
    }
  };

  return (
    <div className="min-h-screen flex flex-col p-8">
      <h1 className="text-2xl font-bold mb-4">Game Dashboard</h1>
      
      <div className="bg-gray-100 p-4 rounded mb-4">
        <p>Status: {isConnected ? 'Connected' : 'Disconnected'}</p>
        <p>Message: {gameMessage}</p>
        <p>Player: {user?.username}</p>
      </div>
      
      <div className="flex gap-4">
        <button
          onClick={sendPing}
          disabled={!isConnected}
          className="px-4 py-2 bg-blue-500 text-white rounded disabled:bg-gray-300"
        >
          Send Ping
        </button>
        
        <button
          onClick={() => gameSocket.disconnect()}
          disabled={!isConnected}
          className="px-4 py-2 bg-red-500 text-white rounded disabled:bg-gray-300"
        >
          Disconnect
        </button>
      </div>
    </div>
  );
}
```

### 7. App Layout with Auth Provider

```typescript
// app/layout.tsx
import { AuthProvider } from '@/lib/contexts/AuthContext';
import './globals.css';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <AuthProvider>
          {children}
        </AuthProvider>
      </body>
    </html>
  );
}
```

## Security Considerations for Next.js

1. **Token Storage**:
   - For client-side rendering, localStorage is used in these examples.
   - For better security in production, consider using an HttpOnly cookie approach with a server component or API route that sets the cookie.

2. **Environment Variables**:
   - Use `.env` for local development.
   - Ensure all client-side variables are prefixed with `NEXT_PUBLIC_`.
   - Keep sensitive values like JWT secrets server-side only.

3. **Server Components vs. Client Components**:
   - This example uses primarily client components for auth flow.
   - For improved security, consider using server components where possible, especially for initial data loading.

4. **Error Handling**:
   - Implement consistent error handling for authentication failures.
   - Don't expose sensitive information in error messages.

