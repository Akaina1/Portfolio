---
description: for creating mongoose models
globs: 
alwaysApply: false
---
# TypeScript Mongoose Model Development Checklist

## CRITICAL CORRECTIONS FOR COMMON ERRORS

1. **NEVER IMPORT `Document` IN TYPE FILES** - Type files should only import `Types` from mongoose, not `Document` which is only for model files.

2. **EXACT ESLINT DISABLE COMMENT FORMAT** - When declaring module augmentation for mongoose, always use this exact comment:
   ```typescript
   // eslint-disable-next-line @typescript-eslint/no-empty-object-type
   ```

3. **EMPTY OBJECT TYPE IN MONGOOSE QUERY INTERFACE** - Always use `THelpers = {}` (empty object literal), never use `THelpers = object` in the Query interface declaration:
   ```typescript
   interface Query<ResultType, DocType, THelpers = {}> {
     // methods here
   }
   ```

4. **TYPE FILES MUST FOLLOW FRONTEND/BACKEND PATTERN** - Always include `@frontend` and `@backend` comments for ObjectId fields and use union types:
   ```typescript
   /**
    * Some ID field
    * @backend Types.ObjectId
    * @frontend string
    */
   someId: Types.ObjectId | string
   ```

## CRITICAL REMINDERS
- **ALWAYS CREATE MODEL FILE FIRST THEN TYPE FILE**
- **AVOID REDUNDANT FIELDS** - Don't add fields that are implicit in the model name (e.g., don't add a `storyPathType` field to a model specifically for world story progression)

## 1. Import Statements
- [ ] Import required Mongoose types: `Schema`, `Document`, `Model`, etc.
- [ ] Import any related model types or interfaces needed for references
- [ ] Define string constants for validation values at the top of the file instead of using enums
- [ ] Use the pattern: `const CONSTANT_NAME = { VALUE1: 'VALUE1', VALUE2: 'VALUE2' } as const

## 2. Interface Definitions
- [ ] Define method interface (e.g., `ICharacterMethods`) for document instance methods
- [ ] Define query helper interface (e.g., `CharacterQueryHelpers`) if using custom queries
- [ ] Define main document interface (e.g., `ICharacter`) extending `Document` and method interface
- [ ] Include detailed JSDoc comments for each interface and property
- [ ] Organize properties into logical groups with comments

## 3. Type Definitions
- [ ] Create a combined model type (e.g., `CharacterModel`) that includes:
  - [ ] Document structure
  - [ ] Query helpers (if any)
  - [ ] Instance methods
- [ ] Use proper type parameters for Mongoose generics

## 4. Schema Definition
- [ ] Create Mongoose schema with appropriate types and options
- [ ] Set default values for fields where appropriate
- [ ] Add validation rules where needed
- [ ] **IMPORTANT**: When using string constants for validation:
  - [ ] Use `enum: Object.values(CONSTANT_NAME)` for the schema definition
  - [ ] Use direct comparison (`value === CONSTANT_NAME.VALUE`) in validator functions and methods
  - [ ] Properly type validator function parameters (e.g., `(props: { value: string })` for message functions)
- [ ] Include references to other models with proper `ref` attributes
- [ ] Organize schema structure to match interface organization
- [ ] Add indexes for frequently queried fields

## 5. Instance Methods
- [ ] Implement ONE methods in the method interface, add comments for future additions
- [ ] Add proper `this` typing to methods to avoid TypeScript errors
- [ ] **IMPORTANT**: When checking constant values in methods, use direct comparison (`this.status === STATUS.COMPLETED`)
- [ ] Include detailed JSDoc comments explaining method purpose and parameters
- [ ] Ensure methods return appropriate types

## 6. Query Helpers (if needed)
- [ ] Declare module augmentation for Mongoose to recognize custom query helpers
- [ ] Implement ONE query helper method on the schema, create comments for future additions
- [ ] Add proper `this` typing to query helpers
- [ ] Include detailed comments explaining query purpose and usage
- [ ] Add `@ts-expect-error` comments where needed for dynamic properties

## 7. Middleware/Hooks
- [ ] Add pre/post hooks for common operations (save, remove, validate, etc.)
- [ ] Ensure hooks have proper `this` typing
- [ ] **IMPORTANT**: When checking constant values in hooks, use direct comparison (`this.status === STATUS.COMPLETED`)
- [ ] Document the purpose of each hook with comments

## 8. Model Export
- [ ] Export the model with proper typing
- [ ] Export interfaces for use in other files
- [ ] Add final JSDoc comment explaining the model's purpose

## 9. Code Quality and Consistency
- [ ] Use consistent naming conventions:
  - [ ] PascalCase for interfaces and types
  - [ ] camelCase for properties and methods
  - [ ] Prefix interfaces with "I" (e.g., `ICharacter`)
- [ ] Organize code in a consistent order across all model files
- [ ] Add section headers as comments for better readability
- [ ] Ensure proper indentation and formatting

## 10. Type Safety Checks
- [ ] Verify no `any` types are used unnecessarily
- [ ] Address all TypeScript warnings and errors
- [ ] **IMPORTANT**: Avoid unsafe assignments and member access by properly typing variables and parameters
- [ ] Use ESLint disable comments only when absolutely necessary
- [ ] Ensure cross-model references use proper types

## 11. Documentation
- [ ] Include comprehensive JSDoc comments for all components
- [ ] Document relationships between models
- [ ] Add examples of common usage patterns in comments
- [ ] Explain any complex logic or calculations
- [ ] use the identifier "TODO" in comments to show a future improvement point

## 12. Performance Considerations
- [ ] Add appropriate indexes for query performance
- [ ] Consider schema design for common query patterns
- [ ] Evaluate embedded vs. referenced documents based on access patterns
- [ ] Add comments explaining performance-related decisions

## 13. Type File Creation
- [ ] Import only `Types` from mongoose (not `Document` or other model-specific types)
- [ ] Define shared interfaces with proper ObjectId/string union types
- [ ] Add `@backend` and `@frontend` comments for all ID and Date fields
- [ ] Create appropriate DTOs for create, update, and other operations
- [ ] Include summary types for list views and other UI needs

## 14. Final Review
- [ ] Check for unused imports or types
- [ ] Ensure consistent error handling
- [ ] Verify all required fields have appropriate validation
- [ ] Test the model with sample data to verify functionality
- [ ] **IMPORTANT**: Double-check that all imported helpers are actually used in the code

## Common Mistakes to Avoid

1. **Using enums instead of string constants**: Always use string constants defined at the top of the file for validation values to avoid TypeScript type issues.

2. **Adding redundant fields**: Don't add fields that are implicit in the model name or purpose. For example, a `WorldStoryProgression` model doesn't need a `storyPathType` field since it's specifically for world story progression.

3. **Unsafe type assignments**: Always properly type function parameters, especially in validator message functions (e.g., `(props: { value: string })` instead of just `(props)`).

4. **Creating type files before model files**: Always create the model file first, then the corresponding type file.

5. **Inconsistent constant handling**: Use the same pattern for handling string constants throughout your codebase. If you use direct comparison in one place, use it consistently everywhere.

6. **Forgetting to create required constant definitions**: Make sure to define all necessary string constants at the top of your model files before using them.

7. **Importing Document in type files**: Type files should never import `Document` from mongoose, only `Types` if needed.

8. **Using incorrect ESLint disable comments**: Always use the exact format for ESLint disable comments, especially for module augmentation.

9. **Using `object` instead of `{}` in Query interface**: Always use `THelpers = {}` in the Query interface declaration, never `THelpers = object`.

10. **Missing frontend/backend annotations**: Always include `@frontend` and `@backend` comments for fields that have different types between environments.

---

### Example Model File Structure

For consistency, follow this general structure for all model files:

```typescript
// 1. Imports
import mongoose, { Schema, Document, Model, ... } from 'mongoose'

// 2. String Constants
const SOME_CONSTANT = {
    VALUE1: 'VALUE1',
    VALUE2: 'VALUE2',
    VALUE3: 'VALUE3',
} as const;

// 3. Method Interface
export interface IModelNameMethods {
    // Method definitions
}

// 4. Main Document Interface
export interface IModelName extends Document, IModelNameMethods {
    // Property definitions organized by category
}

// 5. Model Type
type ModelNameModel = Model<IModelName, ModelNameQueryHelpers, IModelNameMethods>

// 6. Schema Definition
const ModelNameSchema = new Schema({
    // Schema definition matching interface structure
    constantField: {
        type: String,
        enum: Object.values(SOME_CONSTANT),
        default: SOME_CONSTANT.VALUE1
    }
})

// 7. Instance Methods
ModelNameSchema.methods.methodName = function(this: IModelName, ...args) {
    // Use direct comparison for constant values
    if (this.constantField === SOME_CONSTANT.VALUE2) {
        // Method implementation
    }
}

// 8. Middleware/Hooks
ModelNameSchema.pre('save', function(this: IModelName, next) {
    // Hook implementation
    next()
})

// 9. Query Helpers (if needed)
// Module augmentation EXAMPLE:
declare module 'mongoose' {
    // always use this exact disable comment below for declaring module with {}:
    // eslint-disable-next-line @typescript-eslint/no-empty-object-type
    interface Query<ResultType, DocType, THelpers = {}> {
        findByCharacter(characterId: mongoose.Types.ObjectId): QueryWithHelpers<ResultType, DocType, THelpers>
    }
}

// Query helper implementations
ModelNameSchema.query.queryHelperName = function(this: QueryWithHelpers<...>, ...args) {
    // Implementation
}

// 10. Model Export
export const ModelName: ModelNameModel = mongoose.model<IModelName, ModelNameModel>('ModelName', ModelNameSchema)
```

### Example Type File Structure

```typescript
import { Types } from 'mongoose'

/**
 * Main interface for the model
 */
export interface IModelName {
    /**
     * Unique identifier
     * @backend Types.ObjectId
     * @frontend string
     */
    _id?: Types.ObjectId | string
    
    // Other properties with appropriate comments
}

/**
 * Type for creating a new entity
 */
export interface CreateModelNameDto {
    // Required fields for creation
}

/**
 * Type for updating an entity
 */
export type UpdateModelNameDto = Partial<Omit<IModelName, '_id' | 'createdAt'>>

/**
 * Type for summary information (used in lists, etc.)
 */
export interface ModelNameSummary {
    // Summary fields
}
```
```