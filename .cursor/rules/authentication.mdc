---
description: Authentication
globs: 
alwaysApply: false
---
# Passport.js Strategy for NestJS - Simple Breakdown

Here's a simple breakdown of implementing Passport.js in your NestJS game server. I'll keep it brief with just enough code to understand the structure.

## Files You'll Need (basic setup, more files were added)

```
src/modules/auth/
├── auth.module.ts         // Main module file
├── auth.controller.ts     // Handles login/register endpoints
├── auth.service.ts        // Authentication business logic
├── strategies/
│   └── local.strategy.ts  // Passport local strategy
├── guards/
│   ├── local-auth.guard.ts    // Guard for username/password auth
│   └── jwt-auth.guard.ts      // Guard for protected routes
└── dto/
    ├── login.dto.ts       // Data transfer object for login
    └── register.dto.ts    // Data transfer object for registration
```

## Basic Implementation

### 1. Install Required Packages

```bash
npm install @nestjs/passport passport passport-local passport-jwt @nestjs/jwt bcrypt
npm install -D @types/passport-local @types/passport-jwt @types/bcrypt
```

### 2. Auth Module

```typescript:src/modules/auth/auth.module.ts
import { Module } from '@nestjs/common';
import { PassportModule } from '@nestjs/passport';
import { JwtModule } from '@nestjs/jwt';
import { AuthService } from './auth.service';
import { AuthController } from './auth.controller';
import { LocalStrategy } from './strategies/local.strategy';
import { JwtStrategy } from './strategies/jwt.strategy';
import { MongooseModule } from '@nestjs/mongoose';
import { Player, PlayerSchema } from '../../models/player.schema';

@Module({
  imports: [
    PassportModule,
    JwtModule.register({
      secret: process.env.JWT_SECRET || 'your-secret-key',
      signOptions: { expiresIn: '1h' },
    }),
    MongooseModule.forFeature([{ name: Player.name, schema: PlayerSchema }]),
  ],
  controllers: [AuthController],
  providers: [AuthService, LocalStrategy, JwtStrategy],
  exports: [AuthService],
})
export class AuthModule {}
```

### 3. Auth Service

```typescript:src/modules/auth/auth.service.ts
import { Injectable } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import * as bcrypt from 'bcrypt';
import { Player } from '../../models/player.schema';

@Injectable()
export class AuthService {
  constructor(
    @InjectModel(Player.name) private playerModel: Model<Player>,
    private jwtService: JwtService,
  ) {}

  async validateUser(username: string, password: string): Promise<any> {
    const user = await this.playerModel.findOne({ username });
    if (user && await bcrypt.compare(password, user.password)) {
      const { password, ...result } = user.toObject();
      return result;
    }
    return null;
  }

  async login(user: any) {
    const payload = { username: user.username, sub: user._id };
    return {
      access_token: this.jwtService.sign(payload),
      user: {
        id: user._id,
        username: user.username,
      }
    };
  }

  async register(username: string, password: string) {
    const hashedPassword = await bcrypt.hash(password, 10);
    const newPlayer = new this.playerModel({
      username,
      password: hashedPassword,
    });
    await newPlayer.save();
    
    // Return everything except password
    const { password: _, ...result } = newPlayer.toObject();
    return result;
  }
}
```

### 4. Local Strategy

```typescript:src/modules/auth/strategies/local.strategy.ts
import { Strategy } from 'passport-local';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { AuthService } from '../auth.service';

@Injectable()
export class LocalStrategy extends PassportStrategy(Strategy) {
  constructor(private authService: AuthService) {
    super();
  }

  async validate(username: string, password: string): Promise<any> {
    const user = await this.authService.validateUser(username, password);
    if (!user) {
      throw new UnauthorizedException('Invalid credentials');
    }
    return user;
  }
}
```

### 5. JWT Strategy

```typescript:src/modules/auth/strategies/jwt.strategy.ts
import { ExtractJwt, Strategy } from 'passport-jwt';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable } from '@nestjs/common';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor() {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: process.env.JWT_SECRET || 'your-secret-key',
    });
  }

  async validate(payload: any) {
    return { userId: payload.sub, username: payload.username };
  }
}
```

### 6. Auth Controller

```typescript:src/modules/auth/auth.controller.ts
import { Controller, Post, Body, UseGuards, Request } from '@nestjs/common';
import { AuthService } from './auth.service';
import { LocalAuthGuard } from './guards/local-auth.guard';
import { RegisterDto } from './dto/register.dto';

@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  @UseGuards(LocalAuthGuard)
  @Post('login')
  async login(@Request() req) {
    return this.authService.login(req.user);
  }

  @Post('register')
  async register(@Body() registerDto: RegisterDto) {
    return this.authService.register(
      registerDto.username,
      registerDto.password,
    );
  }
}
```

### 7. Auth Guards

```typescript:src/modules/auth/guards/local-auth.guard.ts
import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class LocalAuthGuard extends AuthGuard('local') {}
```

```typescript:src/modules/auth/guards/jwt-auth.guard.ts
import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {}
```

### 8. DTOs

```typescript:src/modules/auth/dto/login.dto.ts
export class LoginDto {
  username: string;
  password: string;
}
```

```typescript:src/modules/auth/dto/register.dto.ts
export class RegisterDto {
  username: string;
  password: string;
}
```

## WebSocket Authentication

For your WebSocket connections, you'll need to modify your existing WebSocket gateway:

```typescript:src/modules/websocket/websocket.gateway.ts
// Add this import
import { JwtService } from '@nestjs/jwt';

// In your constructor
constructor(
  private readonly socketService: WebsocketService,
  private readonly jwtService: JwtService, // Add this
) {}

// In your handleConnection method
async handleConnection(client: Socket): Promise<void> {
  try {
    // Extract token from handshake
    const token = client.handshake.auth?.token || client.handshake.query?.token;
    
    if (!token) {
      throw new UnauthorizedException('No authentication token provided');
    }
    
    // Verify JWT token
    const payload = this.jwtService.verify(token as string);
    
    // Set authenticated socket data
    const authSocket = client as AuthenticatedSocket;
    authSocket.data = {
      playerId: payload.sub,
      authenticated: true,
      authenticatedAt: new Date(),
    };
    
    // Register player
    this.socketService.registerPlayer(client, payload.sub);
    
    // Emit success
    client.emit('authentication:success', {
      playerId: payload.sub,
      message: 'Successfully connected',
    });
    
  } catch (error) {
    // Handle error as before
  }
}
```

## Usage in Your Application

1. **Login**: Users call `POST /auth/login` with username/password
2. **Protected Routes**: Add `@UseGuards(JwtAuthGuard)` to controllers
3. **WebSocket**: Client connects with the JWT token in handshake

## Time Estimate

This implementation should take about 1-2 hours to set up and test. It's simple but effective for a portfolio project.

# Integrating Passport.js with Your Existing Player Model

Yes, the Passport.js authentication system can integrate perfectly with your existing Player model. Your model is already well-structured with clear separation between account (Player) and in-game entity (Character).

## Integration Overview

Here's how the integration would work:

1. **Authentication Flow**:
   - User registers → Create Player document
   - User logs in → Validate against Player document → Issue JWT
   - JWT contains Player ID for subsequent requests

2. **No Duplication**:
   - Use your existing Player model directly
   - No need for a separate User model

## Key Integration Points

### 1. Auth Service

Your auth service would directly use your existing Player model:

```typescript
// In auth.service.ts
constructor(
  @InjectModel(Player.name) private playerModel: Model<IPlayer>,
  private jwtService: JwtService,
) {}

async validateUser(email: string, password: string): Promise<any> {
  // Find player by email (using your existing model)
  const player = await this.playerModel.findOne({ email });
  
  // Validate password
  if (player && await bcrypt.compare(password, player.password)) {
    // Return player without password
    const { password, ...result } = player.toObject();
    return result;
  }
  return null;
}
```

### 2. Registration Process

When registering, create a new Player document:

```typescript
async register(username: string, email: string, password: string) {
  // Hash password
  const hashedPassword = await bcrypt.hash(password, 10);
  
  // Create new player using your existing model
  const newPlayer = new this.playerModel({
    username,
    email,
    password: hashedPassword,
    accountStatus: 'active',
    roles: ['player'],
    lastLogin: new Date(),
    settings: {
      notifications: true,
      theme: 'dark',
      keybinds: {},
    }
  });
  
  await newPlayer.save();
  
  // Return player without password
  const { password: _, ...result } = newPlayer.toObject();
  return result;
}
```

### 3. JWT Payload

Your JWT would contain the Player ID:

```typescript
async login(player: IPlayer) {
  const payload = { 
    sub: player._id.toString(),
    username: player.username,
    roles: player.roles 
  };
  
  return {
    access_token: this.jwtService.sign(payload),
    player: {
      id: player._id,
      username: player.username,
      // Include other non-sensitive fields
    }
  };
}
```

### 4. Password Field Addition

You'll need to add a password field to your Player model:

```typescript
// Add to your IPlayer interface
password?: string; // Optional because we don't always return it

// Add to your PlayerSchema
password: { 
  type: String, 
  required: true,
  select: false // Don't include by default in query results
},
```

## Minimal Changes Required

The good news is you only need to:

1. Add a password field to your Player model
2. Create the auth module with the files I outlined earlier
3. Connect the auth module to use your existing Player model

Your existing Player model is already well-designed for this purpose with:
- Account status tracking
- Role-based permissions
- Session tracking
- Last login timestamps

## Starting Point

THIS IS THE STEPS WE HAVE IMPLEMENTED BELOW:

<think>Let's organize a step-by-step implementation plan for integrating Passport.js authentication into the game server, working within the structure where the auth module is placed under the websocket module.

Based on the cursor rules context and the previous discussions, I'll outline a sequential approach that allows for validation at each step.

Step 1: Set up the base files and dependencies
Step 2: Create DTOs (Data Transfer Objects)
Step 3: Implement the auth service
Step 4: Create Passport strategies
Step 5: Implement guards
Step 6: Set up the controller
Step 7: Configure the auth module
Step 8: Update the WebSocket gateway for token authentication

Let me provide details for each step.</think># Implementing Passport.js Authentication: Step-by-Step Approach

Since you've already created the auth module folder structure within the websocket module, let's break down the implementation into manageable steps. This approach will help us validate each component before moving to the next.

## Step 1: Install Required Dependencies

First, let's make sure we have all the necessary packages:

```bash
npm install @nestjs/passport passport passport-local passport-jwt @nestjs/jwt bcrypt
npm install -D @types/passport-local @types/passport-jwt @types/bcrypt
```

## Step 2: Create Data Transfer Objects (DTOs)

Let's start with defining our DTOs for login and registration:

```typescript:src/modules/websocket/auth/dto/login.dto.ts
import { IsNotEmpty, IsString } from 'class-validator';

export class LoginDto {
  @IsNotEmpty()
  @IsString()
  username: string;

  @IsNotEmpty()
  @IsString()
  password: string;
}
```

```typescript:src/modules/websocket/auth/dto/register.dto.ts
import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';

export class RegisterDto {
  @IsNotEmpty()
  @IsString()
  username: string;

  @IsNotEmpty()
  @IsEmail()
  email: string;

  @IsNotEmpty()
  @IsString()
  @MinLength(6)
  password: string;
}
```

## Step 3: Implement Auth Service

The auth service will handle user validation, registration, and JWT generation:

```typescript:src/modules/websocket/auth/auth.service.ts
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import * as bcrypt from 'bcrypt';
import { Player } from '../../../models/player-state/core/player.model';
import { RegisterDto } from './dto/register.dto';
import { IPlayer } from '../../../models/player-state/core/player.model';

@Injectable()
export class AuthService {
  constructor(
    @InjectModel(Player.name) private playerModel: Model<IPlayer>,
    private jwtService: JwtService,
  ) {}

  /**
   * Validates a user during login attempt
   */
  async validateUser(username: string, password: string): Promise<any> {
    // Find the player by username and explicitly select the password field
    const player = await this.playerModel.findOne({ username }).select('+password');
    
    if (!player) {
      return null;
    }
    
    // Check if the provided password matches the stored hash
    const isPasswordValid = await player.comparePassword(password);
    
    if (isPasswordValid) {
      // Remove password from the returned object
      const { password, ...result } = player.toObject();
      return result;
    }
    
    return null;
  }

  /**
   * Handles user login and token generation
   */
  async login(player: any) {
    // Create JWT payload
    const payload = { 
      username: player.username,
      sub: player._id,
    };

    // Return token and player info
    return {
      access_token: this.jwtService.sign(payload),
      player: {
        id: player._id,
        username: player.username,
        email: player.email,
      }
    };
  }

  /**
   * Registers a new player
   */
  async register(registerDto: RegisterDto) {
    const { username, email, password } = registerDto;
    
    // Check if username or email already exists
    const existingPlayer = await this.playerModel.findOne({
      $or: [{ username }, { email }]
    });
    
    if (existingPlayer) {
      throw new UnauthorizedException(
        'Username or email already in use'
      );
    }
    
    // Create new player
    const newPlayer = new this.playerModel({
      username,
      email,
      password, // Will be hashed by the pre-save hook
      accountStatus: 'active',
      lastLogin: new Date(),
      settings: {
        notifications: true,
        theme: 'dark',
        keybinds: {},
      }
    });
    
    await newPlayer.save();
    
    // Return player without sensitive fields
    const savedPlayer = newPlayer.toObject();
    delete savedPlayer.password;
    
    return savedPlayer;
  }
}
```

## Step 4: Create Passport Strategies

Now let's implement our authentication strategies, starting with local (username/password):

```typescript:src/modules/websocket/auth/strategies/local.strategy.ts
import { Strategy } from 'passport-local';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { AuthService } from '../auth.service';

@Injectable()
export class LocalStrategy extends PassportStrategy(Strategy) {
  constructor(private authService: AuthService) {
    super();
  }

  async validate(username: string, password: string): Promise<any> {
    const user = await this.authService.validateUser(username, password);
    
    if (!user) {
      throw new UnauthorizedException('Invalid username or password');
    }
    
    return user;
  }
}
```

And then JWT strategy for token-based authentication:

```typescript:src/modules/websocket/auth/strategies/jwt.strategy.ts
import { ExtractJwt, Strategy } from 'passport-jwt';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(private configService: ConfigService) {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: configService.get<string>('JWT_SECRET') || 'your-secret-key',
    });
  }

  async validate(payload: any) {
    return { 
      userId: payload.sub, 
      username: payload.username 
    };
  }
}
```

## Step 5: Create Auth Guards

Now we'll create the guards that use our strategies:

```typescript:src/modules/websocket/auth/guards/local-auth.guard.ts
import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class LocalAuthGuard extends AuthGuard('local') {}
```

```typescript:src/modules/websocket/auth/guards/jwt-auth.guard.ts
import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {}
```

## Step 6: Implement Auth Controller

The controller will expose our authentication endpoints:

```typescript:src/modules/websocket/auth/auth.controller.ts
import { Controller, Post, Body, UseGuards, Request, Get } from '@nestjs/common';
import { AuthService } from './auth.service';
import { LocalAuthGuard } from './guards/local-auth.guard';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { RegisterDto } from './dto/register.dto';

@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  @UseGuards(LocalAuthGuard)
  @Post('login')
  async login(@Request() req) {
    return this.authService.login(req.user);
  }

  @Post('register')
  async register(@Body() registerDto: RegisterDto) {
    return this.authService.register(registerDto);
  }

  @UseGuards(JwtAuthGuard)
  @Get('profile')
  getProfile(@Request() req) {
    return req.user;
  }
}
```

## Step 7: Configure Auth Module

Now let's bring everything together in the auth module:

```typescript:src/modules/websocket/auth/auth.module.ts
import { Module } from '@nestjs/common';
import { PassportModule } from '@nestjs/passport';
import { JwtModule } from '@nestjs/jwt';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { MongooseModule } from '@nestjs/mongoose';
import { AuthController } from './auth.controller';
import { AuthService } from './auth.service';
import { LocalStrategy } from './strategies/local.strategy';
import { JwtStrategy } from './strategies/jwt.strategy';
import { Player, PlayerSchema } from '../../../models/player-state/core/player.model';

@Module({
  imports: [
    PassportModule,
    JwtModule.registerAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (configService: ConfigService) => ({
        secret: configService.get<string>('JWT_SECRET') || 'your-secret-key',
        signOptions: { expiresIn: '1h' },
      }),
    }),
    MongooseModule.forFeature([
      { name: Player.name, schema: PlayerSchema }
    ]),
  ],
  controllers: [AuthController],
  providers: [AuthService, LocalStrategy, JwtStrategy],
  exports: [AuthService],
})
export class AuthModule {}
```

## Step 8: Update WebSocket Gateway

Finally, let's update the WebSocket gateway to use our JWT authentication:

```typescript:src/modules/websocket/websocket.gateway.ts
// Update the handleConnection method in your existing gateway

import { JwtService } from '@nestjs/jwt';
import { UnauthorizedException } from '@nestjs/common';

// Add JwtService to the constructor
constructor(
  private readonly socketService: WebsocketService,
  private readonly jwtService: JwtService,
) {}

// Update the handleConnection method
async handleConnection(client: Socket): Promise<void> {
  try {
    // Extract token from handshake
    const token = client.handshake.auth?.token || client.handshake.query?.token;
    
    if (!token) {
      throw new UnauthorizedException('No authentication token provided');
    }
    
    // Verify JWT token
    const payload = this.jwtService.verify(token as string);
    
    // Set authenticated socket data
    const authSocket = client as AuthenticatedSocket;
    authSocket.data = {
      playerId: payload.sub,
      authenticated: true,
      authenticatedAt: new Date(),
    };
    
    // Register player
    this.socketService.registerPlayer(client, payload.sub);
    
    // Emit success
    client.emit('authentication:success', {
      playerId: payload.sub,
      message: 'Successfully connected',
    });
    
  } catch (error) {
    // Handle authentication error
    const errorMessage = error instanceof Error ? error.message : 'Authentication failed';
    client.emit('authentication:failure', { message: errorMessage });
    client.disconnect(true);
  }
}
```