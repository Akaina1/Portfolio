---
description: frontend details on implementing character creation steps
globs: 
alwaysApply: false
---
## Overview

Based on the backend structure and requirements, we'll implement a character creation flow that integrates with the existing authentication system. After login, players without characters will be redirected to character creation, while those with characters will proceed to character selection or directly to the game.

## File Structure and Components

```
src/
├── components/
│   ├── Game/
│   │   ├── CharacterCreator/
│   │   │   ├── index.tsx                   (Main container component)
│   │   │   ├── ClassSelection.tsx          (Step 1: Class selection)
│   │   │   ├── CharacterDetails.tsx        (Step 2: Name and customization)
│   │   │   ├── ReviewCharacter.tsx         (Step 3: Review and confirm)
│   │   │   ├── ClassCard.tsx               (Reusable class selection card)
│   │   │   ├── ClassDetails.tsx            (Detailed class information)
│   │   │   ├── AttributeDisplay.tsx        (Display character attributes)
│   │   │   └── CharacterCreationSuccess.tsx (Success state)
│   │   └── CharacterSelection/
│   │       └── index.tsx                   (Character selection screen)
│   └── UI/
│       └── StepProgress.tsx                (Step indicator component)
├── services/
│   └── api/
│       └── characterService.ts             (New API service for character endpoints)
├── stores/
│   ├── Game/
│   │   └── characterStore.ts               (New store for character data)
│   │   └── gameStore.ts                    (Update with character states)
│   └── Player/
│       └── playerStore.ts                  (Update to handle character status)
└── hooks/
    └── useCharacterCreation.ts             (Custom hook for creation flow)
```

## Step-by-Step Implementation Plan

### 1. Create Character API Service (`src/services/api/characterService.ts`)

1. Implement API methods for:
   - `getCharacterClasses()`: Fetch available character classes
   - `getCharacterClassById(id)`: Get detailed class info
   - `createCharacter(data)`: Submit character creation
   - `getPlayerCharacters()`: Get player's characters
   - `hasCharacters()`: Check if player has characters

### 2. Update Game Store (`src/stores/Game/gameStore.ts`)

1. Add new view states:
   - 'characterCreation'
   - 'characterSelection'
2. Update the state interface to include these new states
3. Create transitions between auth, character creation, character selection, and game

### 3. Create Character Store (`src/stores/Game/characterStore.ts`)

1. Create store to manage:
   - Available character classes
   - Character creation form state
   - Selected class data
   - Player's characters
   - Loading/error states

### 4. Update Player Store (`src/stores/Player/playerStore.ts`)

1. Add character status to player state:
   - `hasCharacters` flag
   - `characterCount` property
2. Update login flow to handle character status
3. Modify the authentication response handling to check for characters

### 5. Create Character Creation Hook (`src/hooks/useCharacterCreation.ts`)

1. Create a custom hook to manage:
   - Multi-step form state
   - Form validation
   - Step navigation
   - API interactions
   - Error handling

### 6. Update Game Page (`src/app/(frontend)/game/page.tsx`)

1. Add logic to check for characters after authentication
2. Update renderView function to include:
   - Character creation view
   - Character selection view
3. Add transitions between views based on player state

### 7. Create Main Character Creator Component (`src/components/Game/CharacterCreator/index.tsx`)

1. Build the container component that:
   - Manages creation steps
   - Fetches character classes
   - Handles state transitions
   - Renders appropriate step components

### 8. Implement Step Components

#### Class Selection (`src/components/Game/CharacterCreator/ClassSelection.tsx`)
1. Display available character classes
2. Allow filtering by category
3. Show basic class information
4. Handle class selection

#### Class Card (`src/components/Game/CharacterCreator/ClassCard.tsx`)
1. Create reusable card for class selection
2. Display class image, name, difficulty
3. Highlight selected class

#### Class Details (`src/components/Game/CharacterCreator/ClassDetails.tsx`)
1. Show detailed class information
2. Display attributes, resources, abilities
3. Implement modal or expandable view

#### Character Details (`src/components/Game/CharacterCreator/CharacterDetails.tsx`)
1. Create character name input form
2. Display selected class information
3. Show base attributes
4. Validate character name

#### Review Character (`src/components/Game/CharacterCreator/ReviewCharacter.tsx`)
1. Create summary screen showing all selections
2. Display final character preview
3. Provide back and submit buttons

#### Success Screen (`src/components/Game/CharacterCreator/CharacterCreationSuccess.tsx`)
1. Show success message
2. Display created character information
3. Provide button to enter game

### 9. Create Character Selection Component (`src/components/Game/CharacterSelection/index.tsx`)

1. Build component to:
   - Display all player characters
   - Allow selection of character to play
   - Provide option to create a new character
   - Show basic character information

### 10. Update Auth View (`src/components/Game/AuthView/index.tsx`)

1. Modify the login success handler to check character status
2. Add logic to redirect to appropriate view

### 11. Create UI Components

#### Step Progress (`src/components/UI/StepProgress.tsx`)
1. Create progress indicator for multi-step form
2. Highlight current step
3. Allow navigation between completed steps

#### Attribute Display (`src/components/Game/CharacterCreator/AttributeDisplay.tsx`)
1. Create component to visualize character attributes
2. Show primary and secondary attributes
3. Display attribute comparisons

## Workflow Integration

### Authentication Flow Updates:
1. User logs in through `AuthView`
2. `playerStore` checks if player has characters
3. Based on `hasCharacters` flag:
   - If false: Set view state to 'characterCreation'
   - If true and has one character: Set view state to 'game'
   - If true and has multiple characters: Set view state to 'characterSelection'

### Character Creation Flow:
1. Present character class selection
2. After class selection, show character details form
3. Allow player to review selections
4. On submit, create character via API
5. On success, transition to game or character selection

### Character Selection Flow:
1. Display all player characters
2. Allow selection of a character
3. On selection, load character data and transition to game
4. Provide option to create additional characters

## Testing Considerations

1. Test authentication flow with and without existing characters
2. Verify character class data retrieval
3. Test form validation for character name
4. Ensure proper state management between steps
5. Validate character creation submission
6. Test transitions between authentication, creation, selection, and game

This plan provides a comprehensive breakdown of the files and steps needed to implement character creation on the frontend. The approach integrates with your existing authentication system while providing a structured, multi-step creation process for new players.
